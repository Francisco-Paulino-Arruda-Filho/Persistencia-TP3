from datetime import datetime, timedelta
from fastapi import APIRouter, HTTPException, Query, status
from bson import ObjectId
from bson.errors import InvalidId
from typing import Any, Dict, List
from ..logs.logger import logger
from ..core.db import employee_collection, benefit_collection, department_collection
from app.models.Employee import EmployeeCreate, EmployeeOut, PaginatedEmployeeResponse

router = APIRouter(prefix="/employees", tags=["Employees"])

# 游댢 Utilit치rio para converter ObjectIds em strings
def fix_objectid(doc):
    if isinstance(doc, list):
        return [fix_objectid(i) for i in doc]
    if isinstance(doc, dict):
        out = {}
        for k, v in doc.items():
            if isinstance(v, ObjectId):
                out[k] = str(v)
            else:
                out[k] = fix_objectid(v)
        return out
    return doc

# 游댳 Utilit치rio para converter ID
def object_id(id_str: str):
    try:
        return ObjectId(id_str)
    except InvalidId:
        logger.warning(f"ID inv치lido fornecido: {id_str}")
        raise HTTPException(status_code=400, detail="ID inv치lido")


# 游댳 Criar funcion치rio
@router.post("/", response_model=EmployeeOut, status_code=status.HTTP_201_CREATED)
async def create_employee(employee: EmployeeCreate):
    logger.debug(f"Tentando criar funcion치rio: {employee}")
    try:
        employee_dict = employee.model_dump(exclude_unset=True)
        result = await employee_collection.insert_one(employee_dict)
        created = await employee_collection.find_one({"_id": result.inserted_id})
        if created:
            created["_id"] = str(created["_id"])
            logger.info(f"Funcion치rio criado com sucesso: {created}")
            return created
        logger.error("Erro ao recuperar funcion치rio ap칩s inser칞칚o")
        raise HTTPException(status_code=500, detail="Erro ao criar funcion치rio")
    except Exception as e:
        logger.exception(f"Erro inesperado ao criar funcion치rio: {e}")
        raise HTTPException(status_code=500, detail="Erro ao criar funcion치rio")


@router.get("/", response_model=PaginatedEmployeeResponse)
async def list_employees(skip: int = Query(0, ge=0), limit: int = Query(10, ge=1)):
    logger.debug(f"Listando funcion치rios com skip={skip}, limit={limit}")
    try:
        total = await employee_collection.count_documents({})
        employees = await employee_collection.find().skip(skip).limit(limit).to_list(length=limit)
        for emp in employees:
            emp["_id"] = str(emp["_id"])
        logger.info(f"{len(employees)} funcion치rios encontrados")
        return {
            "total": total,
            "skip": skip,
            "limit": limit,
            "data": employees
        }
    except Exception as e:
        logger.exception(f"Erro ao listar funcion치rios: {e}")
        raise HTTPException(status_code=500, detail="Erro interno ao listar funcion치rios")

# 游댳 Atualizar funcion치rio
@router.put("/{employee_id}", response_model=EmployeeOut)
async def update_employee(employee_id: str, update_data: EmployeeCreate):
    logger.debug(f"Tentando atualizar funcion치rio ID {employee_id} com dados {update_data}")
    try:
        data = update_data.model_dump(by_alias=True, exclude_unset=True)
        result = await employee_collection.update_one(
            {"_id": object_id(employee_id)},
            {"$set": data}
        )
        if result.matched_count == 0:
            logger.warning(f"Funcion치rio ID {employee_id} n칚o encontrado para atualiza칞칚o.")
            raise HTTPException(status_code=404, detail="Funcion치rio n칚o encontrado")
        data["_id"] = employee_id
        logger.info(f"Funcion치rio ID {employee_id} atualizado com sucesso.")
        return data
    except HTTPException:
        raise
    except Exception as e:
        logger.exception(f"Erro ao atualizar funcion치rio {employee_id}: {e}")
        raise HTTPException(status_code=500, detail="Erro ao atualizar funcion치rio")


# 游댳 Deletar funcion치rio
@router.delete("/{employee_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_employee(employee_id: str):
    logger.debug(f"Tentando deletar funcion치rio ID {employee_id}")
    try:
        oid = object_id(employee_id)
        result = await employee_collection.delete_one({"_id": oid})
        if result.deleted_count == 0:
            logger.warning(f"Funcion치rio ID {employee_id} n칚o encontrado para dele칞칚o.")
            raise HTTPException(status_code=404, detail="Funcion치rio n칚o encontrado")
        logger.info(f"Funcion치rio ID {employee_id} deletado com sucesso.")
        return {"detail": "Funcion치rio deletado com sucesso"}
    except HTTPException:
        raise
    except Exception as e:
        logger.exception(f"Erro ao deletar funcion치rio {employee_id}: {e}")
        raise HTTPException(status_code=500, detail="Erro ao deletar funcion치rio")
    
@router.get("/count", response_model=dict)
async def count_employees():
    try:
        count = await employee_collection.count_documents({})
        logger.info(f"Total de funcion치rios: {count}")
        return {"count": count}
    except Exception:
        logger.exception("Erro ao contar funcion치rios")
        raise HTTPException(status_code=500, detail="Erro interno ao contar funcion치rios")
    
@router.get("/get_by_admission_date", response_model=List[EmployeeOut])
async def get_by_admission_date(admission_date: datetime = Query(..., description="Data de admiss칚o (AAAA-MM-DD)")):
    try:
        # Define intervalo do in칤cio ao fim do dia
        start_date = datetime(admission_date.year, admission_date.month, admission_date.day)
        end_date = start_date + timedelta(days=1)

        logger.debug(f"Buscando funcion치rios admitidos entre {start_date} e {end_date}")

        employees = await employee_collection.find({
            "admission_date": {
                "$gte": start_date,
                "$lt": end_date
            }
        }).to_list(length=None)

        for emp in employees:
            emp["_id"] = str(emp["_id"])

        logger.info(f"{len(employees)} funcion치rios encontrados com data de admiss칚o: {admission_date.date()}")
        return employees
    except Exception as e:
        logger.exception(f"Erro ao buscar funcion치rios por data de admiss칚o {admission_date}: {e}")
        raise HTTPException(status_code=500, detail="Erro ao buscar funcion치rios por data de admiss칚o")
    
@router.get("get_by_cpf/{cpf}", response_model=EmployeeOut)
async def get_employee_by_cpf(cpf: str):
    logger.debug(f"Buscando funcion치rio por CPF {cpf}")
    try:
        employee = await employee_collection.find_one({"cpf": cpf})
        if not employee:
            logger.warning(f"Funcion치rio com CPF {cpf} n칚o encontrado.")
            raise HTTPException(status_code=404, detail="Funcion치rio n칚o encontrado")
        employee["_id"] = str(employee["_id"])
        logger.info(f"Funcion치rio recuperado com sucesso: {employee}")
        return employee
    except Exception as e:
        logger.exception(f"Erro ao buscar funcion치rio por CPF {cpf}: {e}")
        raise HTTPException(status_code=500, detail="Erro ao buscar funcion치rio")
    
@router.get("get_by_name/{name}", response_model=List[EmployeeOut])
async def get_by_name(name: str):
    logger.debug(f"Buscando funcion치rios com nome contendo '{name}'")
    try:
        employees = await employee_collection.find(
            {"name": {"$regex": name, "$options": "i"}}
        ).to_list(length=None)

        for emp in employees:
            emp["_id"] = str(emp["_id"])

        logger.info(f"{len(employees)} funcion치rios encontrados com nome '{name}'")
        return employees
    except Exception as e:
        logger.exception(f"Erro ao buscar funcion치rios por nome {name}: {e}")
        raise HTTPException(status_code=500, detail="Erro ao buscar funcion치rios por nome")
    
@router.get("/benefits/{benefit_id}/departments/{department_id}/employees", response_model=List[Dict[str, Any]])
async def get_employees_by_benefit_and_department(benefit_id: str, department_id: str):
    try:
        # Converte os IDs
        try:
            benefit_oid = ObjectId(benefit_id)
            department_oid = ObjectId(department_id)
        except Exception:
            logger.warning(f"ID inv치lido fornecido: benef칤cio={benefit_id}, departamento={department_id}")
            raise HTTPException(status_code=400, detail="ID de benef칤cio ou departamento inv치lido")

        # Verifica se o benef칤cio existe
        benefit = await benefit_collection.find_one({"_id": benefit_oid})
        if not benefit:
            logger.warning(f"Benef칤cio n칚o encontrado: {benefit_id}")
            raise HTTPException(status_code=404, detail="Benef칤cio n칚o encontrado")

        # Verifica se o departamento existe
        department = await department_collection.find_one({"_id": department_oid})
        if not department:
            logger.warning(f"Departamento n칚o encontrado: {department_id}")
            raise HTTPException(status_code=404, detail="Departamento n칚o encontrado")

        # Busca funcion치rios com o benef칤cio e pertencentes ao departamento
        employees_cursor = employee_collection.find({
            "benefits_id": benefit_oid,
            "department_id": department_oid  # Agora sim: ObjectId
        })
        employees = await employees_cursor.to_list(length=None)
        employees = fix_objectid(employees)

        logger.info(f"{len(employees)} funcion치rios encontrados com benef칤cio {benefit_id} no departamento {department_id}")
        return [
            {
                "benefit": fix_objectid(benefit),
                "department": fix_objectid(department),
                "employee": emp
            }
            for emp in employees
        ]

    except HTTPException:
        raise
    except Exception as e:
        logger.exception(f"Erro ao buscar funcion치rios com benef칤cio {benefit_id} no departamento {department_id}: {e}")
        raise HTTPException(status_code=500, detail="Erro ao buscar funcion치rios com benef칤cio e departamento")
    
# 游댳 Buscar funcion치rio por ID
@router.get("/{employee_id}", response_model=EmployeeOut)
async def get_employee(employee_id: str):
    try:
        oid = object_id(employee_id)
        employee = await employee_collection.find_one({"_id": oid})
        if not employee:
            logger.warning(f"Funcion치rio com ID {employee_id} n칚o encontrado.")
            raise HTTPException(status_code=404, detail="Funcion치rio n칚o encontrado")
        employee["_id"] = str(employee["_id"])
        logger.info(f"Funcion치rio recuperado com sucesso: {employee}")
        return employee
    except HTTPException:
        raise
    except Exception as e:
        logger.exception(f"Erro ao buscar funcion치rio {employee_id}: {e}")
        raise HTTPException(status_code=500, detail="Erro ao buscar funcion치rio")